{"version":3,"sources":["Components/TabPanels/HomePagePanel.js","Components/TabPanels/AboutPanel.js","Components/TabPanels/StreamPanel.js","Components/KrunkyTabBar.js","Components/KrunkySocialMedia.js","firebaseConfig.js","KrunkySite.js","serviceWorker.js","index.js"],"names":["HomePagePanel","AboutPanel","StreamPanel","className","url","width","height","KrunkyTabBar","React","useState","value","setValue","TabPanel","props","children","index","other","role","hidden","id","Box","p","Typography","aSections","label","icon","contents","AppBar","position","Tabs","onChange","event","newValue","map","tab","Tab","KrunkySocialMedia","ButtonGroup","color","variant","Button","href","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firebase","require","KrunkySite","apps","length","initializeApp","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.127834d1.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../KrunkySite.css';\r\n\r\nexport const HomePagePanel = () => {\r\n    return (\r\n        <>\r\n            <div>Home Page!</div>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport '../../KrunkySite.css';\r\n\r\nexport const AboutPanel = () => {\r\n    return (\r\n        <>\r\n            <div>All About Krunky</div>            \r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport '../../KrunkySite.css';\r\nimport ReactPlayer from \"react-player/twitch\";\r\n\r\nexport const StreamPanel = () => {\r\n    return (\r\n        <>\r\n            <div className=\"stream-wrapper\">\r\n                <ReactPlayer\r\n                    url=\"https://www.twitch.tv/krunkyxo\"\r\n                    width=\"70vw\"\r\n                    height=\"calc(70vw * 0.5)\"\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport '../KrunkySite.css';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Box from '@material-ui/core/Box';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport VideocamIcon from '@material-ui/icons/Videocam';\r\nimport { HomePagePanel } from \"./TabPanels/HomePagePanel\";\r\nimport { AboutPanel } from \"./TabPanels/AboutPanel\";\r\nimport { StreamPanel } from \"./TabPanels/StreamPanel\";\r\n\r\nexport const KrunkyTabBar = () => {\r\n    const [value, setValue] = React.useState(0);\r\n    const handleChange = (event, newValue) => {\r\n      setValue(newValue);\r\n    };\r\n    const TabPanel = (props) => {\r\n        const { children, value, index, ...other } = props;\r\n\r\n        return (\r\n            <div\r\n                role=\"tabpanel\"\r\n                hidden={value !== index}\r\n                id={`tabpanel-${index}`}\r\n                {...other}\r\n                >\r\n                {value === index && (\r\n                <Box p={3}>\r\n                    <Typography>{children}</Typography>\r\n                </Box>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n    const aSections = [\r\n        {\r\n        label: \"Home Page\",\r\n        icon: <HomeIcon />,\r\n        id: \"home\",\r\n        contents: <HomePagePanel/>\r\n        },\r\n        {\r\n        label: \"About Me\",\r\n        icon: <FavoriteIcon />,\r\n        id: \"about\",\r\n        contents: <AboutPanel/>\r\n        },\r\n        {\r\n        label: \"Stream Info\",\r\n        icon: <VideocamIcon />,\r\n        id: \"stream\",\r\n        contents: <StreamPanel/>\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <>\r\n        <AppBar className=\"app-bar-wrapper\" position=\"static\">\r\n            <Tabs value={value} onChange={handleChange}  className=\"tab-bar\">\r\n                {aSections.map((tab) => (\r\n                    <Tab icon={tab.icon} label={tab.label} id={tab.id} />\r\n                ))}\r\n            </Tabs>\r\n        </AppBar>\r\n        {aSections.map((tab, index) => (\r\n            <TabPanel value={value} index={index}>\r\n                {tab.contents}\r\n            </TabPanel>\r\n        ))}\r\n        </>\r\n    );\r\n}","import React from 'react';\r\nimport '../KrunkySite.css';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport FacebookIcon from '@material-ui/icons/Facebook';\r\nimport InstagramIcon from '@material-ui/icons/Instagram';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\n\r\nexport const KrunkySocialMedia = () => (\r\n    <AppBar className=\"app-bar-wrapper footer\" position=\"fixed\">\r\n        <ButtonGroup color=\"inherit\" variant=\"text\">\r\n            <Button href=\"https://www.instagram.com/jaydead.xo/\"><InstagramIcon className=\"margin-right-2\"/><span>Instagram</span></Button>\r\n            <Button href=\"https://twitter.com/ludicol0\"><TwitterIcon className=\"margin-right-2\"/>Twitter</Button>\r\n            <Button href=\"https://www.facebook.com/jaydeadxo\"><FacebookIcon className=\"margin-right-2\"/>Facebook</Button>\r\n        </ButtonGroup>\r\n    </AppBar>\r\n);","  // Firebase App config\r\n  const firebaseConfig = {\r\n    apiKey: \"AIzaSyDRQUbdMGjgYL_db5QQp3cOMotwXQR1qjo\",\r\n    authDomain: \"krunky-site.firebaseapp.com\",\r\n    databaseURL: \"https://krunky-site.firebaseio.com\",\r\n    projectId: \"krunky-site\",\r\n    storageBucket: \"krunky-site.appspot.com\",\r\n    messagingSenderId: \"747454681323\",\r\n    appId: \"1:747454681323:web:1db0499c82e5f35b302eae\",\r\n    measurementId: \"G-Q11MMYCSQ9\"\r\n  };\r\n\r\n  export default firebaseConfig;","import React from 'react';\nimport './KrunkySite.css';\nimport { KrunkyTabBar } from \"./Components/KrunkyTabBar\";\nimport { KrunkySocialMedia } from \"./Components/KrunkySocialMedia\";\nimport firebaseConfig from \"./firebaseConfig\";\nconst firebase = require(\"firebase\");\n// Required for side-effects\nrequire(\"firebase/firestore\");\n\nexport const KrunkySite = ()  => {\n\n  // Initialize Cloud Firestore through Firebase\n  if (!firebase.apps.length) {\n    firebase.initializeApp({\n      apiKey: firebaseConfig.apiKey,\n      authDomain: firebaseConfig.authDomain,\n      projectId: firebaseConfig.projectId\n    });\n  }\n\n  //const database = React.useMemo(() => firebase.firestore(), []);\n\n  return (\n    <div className=\"App\">\n      <header className=\"page-header\">\n        <img src={\"https://static-cdn.jtvnw.net/jtv_user_pictures/690c1f7a-dda3-424c-9520-9b12f4ce58b6-profile_image-70x70.png\"} className=\"profile-icon\" alt=\"Whoops...\" />\n        <p>\n          KrunkyXO\n        </p>\n      </header>\n      <KrunkyTabBar/>\n      <KrunkySocialMedia/>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {KrunkySite} from './KrunkySite';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <KrunkySite />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}